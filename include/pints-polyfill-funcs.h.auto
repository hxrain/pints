#ifndef PINTS_POLYFILL_FUNCS_H
#define PINTS_POLYFILL_FUNCS_H

#include <stdint.h>
#include <math.h>


// Internals structures

union __v1d {
  double v;
  int64_t i;
};
union __v1f {
  float v;
  int32_t i;
};
union __v1i {
  int32_t v;
  int32_t i;
};
union __v1l {
  int64_t v;
  int64_t i;
};

struct __v2d { v1d a, b; };
struct __v2f { v1f a, b; };
struct __v2i { v1i a, b; };
struct __v2l { v1l a, b; };
struct __v4d { v2d a, b; };
struct __v4f { v2f a, b; };
struct __v4i { v2i a, b; };
struct __v4l { v2l a, b; };
struct __v8d { v4d a, b; };
struct __v8f { v4f a, b; };
struct __v8i { v4i a, b; };
struct __v8l { v4l a, b; };
struct __v16f { v8f a, b; };
struct __v16i { v8i a, b; };





// Casts ans Conversions declarations

inline v1d __v1d_cast_v2d(struct __v2d a);
inline v1f __v1f_cast_v2f(struct __v2f a);
inline v1i __v1i_cast_v2i(struct __v2i a);
inline v1l __v1l_cast_v2l(struct __v2l a);
inline struct __v2d __v2d_cast_v1d(v1d a);
inline v2d __v2d_cast_v4d(struct __v4d a);
inline struct __v2f __v2f_cast_v1f(v1f a);
inline v2f __v2f_cast_v4f(struct __v4f a);
inline struct __v2i __v2i_cast_v1i(v1i a);
inline v2i __v2i_cast_v4i(struct __v4i a);
inline struct __v2l __v2l_cast_v1l(v1l a);
inline v2l __v2l_cast_v4l(struct __v4l a);
inline struct __v4d __v4d_cast_v2d(v2d a);
inline v4d __v4d_cast_v8d(struct __v8d a);
inline struct __v4f __v4f_cast_v2f(v2f a);
inline v4f __v4f_cast_v8f(struct __v8f a);
inline struct __v4i __v4i_cast_v2i(v2i a);
inline v4i __v4i_cast_v8i(struct __v8i a);
inline struct __v4l __v4l_cast_v2l(v2l a);
inline v4l __v4l_cast_v8l(struct __v8l a);
inline struct __v8d __v8d_cast_v4d(v4d a);
inline struct __v8f __v8f_cast_v4f(v4f a);
inline v8f __v8f_cast_v16f(struct __v16f a);
inline struct __v8i __v8i_cast_v4i(v4i a);
inline v8i __v8i_cast_v16i(struct __v16i a);
inline struct __v8l __v8l_cast_v4l(v4l a);
inline struct __v16f __v16f_cast_v8f(v8f a);
inline struct __v16i __v16i_cast_v8i(v8i a);

inline double __sd_cvt_v1d(v1d a);
inline v1d __v1d_cvt_v1f(v1f a);
inline v1d __v1d_cvt_v1i(v1i a);
inline v1d __v1d_cvt_v1l(v1l a);
inline v1f __v1f_cvt_v1d(v1d a);
inline float __sf_cvt_v1f(v1f a);
inline v1f __v1f_cvt_v1i(v1i a);
inline v1f __v1f_cvt_v1l(v1l a);
inline v1i __v1i_cvt_v1d(v1d a);
inline v1i __v1i_cvt_v1f(v1f a);
inline int32_t __si_cvt_v1i(v1i a);
inline v1i __v1i_cvt_v1l(v1l a);
inline v1l __v1l_cvt_v1d(v1d a);
inline v1l __v1l_cvt_v1f(v1f a);
inline v1l __v1l_cvt_v1i(v1i a);
inline int64_t __sl_cvt_v1l(v1l a);



// Builtins declarations

inline union __v1d __v1d_load(const double *p);
inline union __v1f __v1f_load(const float *p);
inline union __v1i __v1i_load(const int32_t *p);
inline union __v1l __v1l_load(const int64_t *p);

inline v2d __v2d_load(const double *p);
inline v2f __v2f_load(const float *p);
inline v2i __v2i_load(const int32_t *p);
inline v2l __v2l_load(const int64_t *p);
inline v4d __v4d_load(const double *p);
inline v4f __v4f_load(const float *p);
inline v4i __v4i_load(const int32_t *p);
inline v4l __v4l_load(const int64_t *p);
inline v8d __v8d_load(const double *p);
inline v8f __v8f_load(const float *p);
inline v8i __v8i_load(const int32_t *p);
inline v8l __v8l_load(const int64_t *p);
inline v16f __v16f_load(const float *p);
inline v16i __v16i_load(const int32_t *p);


inline v1d compatible_v1d_loadu(const double *p);
inline v1f compatible_v1f_loadu(const float *p);
inline v1i compatible_v1i_loadu(const int32_t *p);
inline v1l compatible_v1l_loadu(const int64_t *p);
inline v2d compatible_v2d_loadu(const double *p);
inline v2f compatible_v2f_loadu(const float *p);
inline v2i compatible_v2i_loadu(const int32_t *p);
inline v2l compatible_v2l_loadu(const int64_t *p);
inline v4d compatible_v4d_loadu(const double *p);
inline v4f compatible_v4f_loadu(const float *p);
inline v4i compatible_v4i_loadu(const int32_t *p);
inline v4l compatible_v4l_loadu(const int64_t *p);
inline v8d compatible_v8d_loadu(const double *p);
inline v8f compatible_v8f_loadu(const float *p);
inline v8i compatible_v8i_loadu(const int32_t *p);
inline v8l compatible_v8l_loadu(const int64_t *p);
inline v16f compatible_v16f_loadu(const float *p);
inline v16i compatible_v16i_loadu(const int32_t *p);


inline void __v1d_store(double *p, union __v1d a);
inline void __v1f_store(float *p, union __v1f a);
inline void __v1i_store(int32_t *p, union __v1i a);
inline void __v1l_store(int64_t *p, union __v1l a);

inline void __v2d_store(double *p, v2d a);
inline void __v2f_store(float *p, v2f a);
inline void __v2i_store(int32_t *p, v2i a);
inline void __v2l_store(int64_t *p, v2l a);
inline void __v4d_store(double *p, v4d a);
inline void __v4f_store(float *p, v4f a);
inline void __v4i_store(int32_t *p, v4i a);
inline void __v4l_store(int64_t *p, v4l a);
inline void __v8d_store(double *p, v8d a);
inline void __v8f_store(float *p, v8f a);
inline void __v8i_store(int32_t *p, v8i a);
inline void __v8l_store(int64_t *p, v8l a);
inline void __v16f_store(float *p, v16f a);
inline void __v16i_store(int32_t *p, v16i a);


inline void compatible_v1d_storeu(double *p, v1d a);
inline void compatible_v1f_storeu(float *p, v1f a);
inline void compatible_v1i_storeu(int32_t *p, v1i a);
inline void compatible_v1l_storeu(int64_t *p, v1l a);
inline void compatible_v2d_storeu(double *p, v2d a);
inline void compatible_v2f_storeu(float *p, v2f a);
inline void compatible_v2i_storeu(int32_t *p, v2i a);
inline void compatible_v2l_storeu(int64_t *p, v2l a);
inline void compatible_v4d_storeu(double *p, v4d a);
inline void compatible_v4f_storeu(float *p, v4f a);
inline void compatible_v4i_storeu(int32_t *p, v4i a);
inline void compatible_v4l_storeu(int64_t *p, v4l a);
inline void compatible_v8d_storeu(double *p, v8d a);
inline void compatible_v8f_storeu(float *p, v8f a);
inline void compatible_v8i_storeu(int32_t *p, v8i a);
inline void compatible_v8l_storeu(int64_t *p, v8l a);
inline void compatible_v16f_storeu(float *p, v16f a);
inline void compatible_v16i_storeu(int32_t *p, v16i a);

inline v1d __v1d_set(double a);
inline v1f __v1f_set(float a);
inline v1i __v1i_set(int32_t a);
inline v1l __v1l_set(int64_t a);








inline struct __v2d __v2d_merge2_v1d(v1d low, v1d high);
inline struct __v2f __v2f_merge2_v1f(v1f low, v1f high);
inline struct __v2i __v2i_merge2_v1i(v1i low, v1i high);
inline struct __v2l __v2l_merge2_v1l(v1l low, v1l high);
inline struct __v4d __v4d_merge2_v2d(v2d low, v2d high);
inline struct __v4f __v4f_merge2_v2f(v2f low, v2f high);
inline struct __v4i __v4i_merge2_v2i(v2i low, v2i high);
inline struct __v4l __v4l_merge2_v2l(v2l low, v2l high);
inline struct __v8d __v8d_merge2_v4d(v4d low, v4d high);
inline struct __v8f __v8f_merge2_v4f(v4f low, v4f high);
inline struct __v8i __v8i_merge2_v4i(v4i low, v4i high);
inline struct __v8l __v8l_merge2_v4l(v4l low, v4l high);
inline struct __v16f __v16f_merge2_v8f(v8f low, v8f high);
inline struct __v16i __v16i_merge2_v8i(v8i low, v8i high);












inline v1d compatible_v1d_get_low_v2d(v2d a);
inline v1f compatible_v1f_get_low_v2f(v2f a);
inline v1i compatible_v1i_get_low_v2i(v2i a);
inline v1l compatible_v1l_get_low_v2l(v2l a);
inline v2d compatible_v2d_get_low_v4d(v4d a);
inline v2f compatible_v2f_get_low_v4f(v4f a);
inline v2i compatible_v2i_get_low_v4i(v4i a);
inline v2l compatible_v2l_get_low_v4l(v4l a);
inline v4d compatible_v4d_get_low_v8d(v8d a);
inline v4f compatible_v4f_get_low_v8f(v8f a);
inline v4i compatible_v4i_get_low_v8i(v8i a);
inline v4l compatible_v4l_get_low_v8l(v8l a);
inline v8f compatible_v8f_get_low_v16f(v16f a);
inline v8i compatible_v8i_get_low_v16i(v16i a);

inline v1d __v1d_get_high_v2d(struct __v2d a);
inline v1f __v1f_get_high_v2f(struct __v2f a);
inline v1i __v1i_get_high_v2i(struct __v2i a);
inline v1l __v1l_get_high_v2l(struct __v2l a);
inline v2d __v2d_get_high_v4d(struct __v4d a);
inline v2f __v2f_get_high_v4f(struct __v4f a);
inline v2i __v2i_get_high_v4i(struct __v4i a);
inline v2l __v2l_get_high_v4l(struct __v4l a);
inline v4d __v4d_get_high_v8d(struct __v8d a);
inline v4f __v4f_get_high_v8f(struct __v8f a);
inline v4i __v4i_get_high_v8i(struct __v8i a);
inline v4l __v4l_get_high_v8l(struct __v8l a);
inline v8f __v8f_get_high_v16f(struct __v16f a);
inline v8i __v8i_get_high_v16i(struct __v16i a);

inline v1d compatible_v1d_get_high_v2d(v2d a);
inline v1f compatible_v1f_get_high_v2f(v2f a);
inline v1i compatible_v1i_get_high_v2i(v2i a);
inline v1l compatible_v1l_get_high_v2l(v2l a);
inline v2d compatible_v2d_get_high_v4d(v4d a);
inline v2f compatible_v2f_get_high_v4f(v4f a);
inline v2i compatible_v2i_get_high_v4i(v4i a);
inline v2l compatible_v2l_get_high_v4l(v4l a);
inline v4d compatible_v4d_get_high_v8d(v8d a);
inline v4f compatible_v4f_get_high_v8f(v8f a);
inline v4i compatible_v4i_get_high_v8i(v8i a);
inline v4l compatible_v4l_get_high_v8l(v8l a);
inline v8f compatible_v8f_get_high_v16f(v16f a);
inline v8i compatible_v8i_get_high_v16i(v16i a);







inline v2d compatible_v2d_merge_v1d(v1d low, v1d high);
inline v2f compatible_v2f_merge_v1f(v1f low, v1f high);
inline v2i compatible_v2i_merge_v1i(v1i low, v1i high);
inline v2l compatible_v2l_merge_v1l(v1l low, v1l high);
inline v4d compatible_v4d_merge_v2d(v2d low, v2d high);
inline v4f compatible_v4f_merge_v2f(v2f low, v2f high);
inline v4i compatible_v4i_merge_v2i(v2i low, v2i high);
inline v4l compatible_v4l_merge_v2l(v2l low, v2l high);
inline v8d compatible_v8d_merge_v4d(v4d low, v4d high);
inline v8f compatible_v8f_merge_v4f(v4f low, v4f high);
inline v8i compatible_v8i_merge_v4i(v4i low, v4i high);
inline v8l compatible_v8l_merge_v4l(v4l low, v4l high);
inline v16f compatible_v16f_merge_v8f(v8f low, v8f high);
inline v16i compatible_v16i_merge_v8i(v8i low, v8i high);











































inline union __v1d __v1d_eq(union __v1d a, union __v1d b);
inline union __v1f __v1f_eq(union __v1f a, union __v1f b);
inline union __v1i __v1i_eq(union __v1i a, union __v1i b);
inline union __v1l __v1l_eq(union __v1l a, union __v1l b);


inline union __v1d __v1d_neq(union __v1d a, union __v1d b);
inline union __v1f __v1f_neq(union __v1f a, union __v1f b);
inline union __v1i __v1i_neq(union __v1i a, union __v1i b);
inline union __v1l __v1l_neq(union __v1l a, union __v1l b);


inline union __v1d __v1d_gt(union __v1d a, union __v1d b);
inline union __v1f __v1f_gt(union __v1f a, union __v1f b);
inline union __v1i __v1i_gt(union __v1i a, union __v1i b);
inline union __v1l __v1l_gt(union __v1l a, union __v1l b);


inline union __v1d __v1d_geq(union __v1d a, union __v1d b);
inline union __v1f __v1f_geq(union __v1f a, union __v1f b);
inline union __v1i __v1i_geq(union __v1i a, union __v1i b);
inline union __v1l __v1l_geq(union __v1l a, union __v1l b);


inline union __v1d __v1d_lt(union __v1d a, union __v1d b);
inline union __v1f __v1f_lt(union __v1f a, union __v1f b);
inline union __v1i __v1i_lt(union __v1i a, union __v1i b);
inline union __v1l __v1l_lt(union __v1l a, union __v1l b);


inline union __v1d __v1d_leq(union __v1d a, union __v1d b);
inline union __v1f __v1f_leq(union __v1f a, union __v1f b);
inline union __v1i __v1i_leq(union __v1i a, union __v1i b);
inline union __v1l __v1l_leq(union __v1l a, union __v1l b);


inline union __v1d __v1d_and(union __v1d a, union __v1d b);
inline union __v1f __v1f_and(union __v1f a, union __v1f b);
inline union __v1i __v1i_and(union __v1i a, union __v1i b);
inline union __v1l __v1l_and(union __v1l a, union __v1l b);


inline union __v1d __v1d_or(union __v1d a, union __v1d b);
inline union __v1f __v1f_or(union __v1f a, union __v1f b);
inline union __v1i __v1i_or(union __v1i a, union __v1i b);
inline union __v1l __v1l_or(union __v1l a, union __v1l b);


inline union __v1d __v1d_xor(union __v1d a, union __v1d b);
inline union __v1f __v1f_xor(union __v1f a, union __v1f b);
inline union __v1i __v1i_xor(union __v1i a, union __v1i b);
inline union __v1l __v1l_xor(union __v1l a, union __v1l b);








inline union __v1d __v1d_add(union __v1d a, union __v1d b);
inline union __v1f __v1f_add(union __v1f a, union __v1f b);
inline union __v1i __v1i_add(union __v1i a, union __v1i b);
inline union __v1l __v1l_add(union __v1l a, union __v1l b);


inline union __v1d __v1d_sub(union __v1d a, union __v1d b);
inline union __v1f __v1f_sub(union __v1f a, union __v1f b);
inline union __v1i __v1i_sub(union __v1i a, union __v1i b);
inline union __v1l __v1l_sub(union __v1l a, union __v1l b);


inline union __v1d __v1d_mul(union __v1d a, union __v1d b);
inline union __v1f __v1f_mul(union __v1f a, union __v1f b);
inline union __v1i __v1i_mul(union __v1i a, union __v1i b);
inline union __v1l __v1l_mul(union __v1l a, union __v1l b);


inline union __v1d __v1d_div(union __v1d a, union __v1d b);
inline union __v1f __v1f_div(union __v1f a, union __v1f b);
inline union __v1i __v1i_div(union __v1i a, union __v1i b);
inline union __v1l __v1l_div(union __v1l a, union __v1l b);


inline union __v1d __v1d_sqrt(union __v1d a);
inline union __v1f __v1f_sqrt(union __v1f a);












inline void __v1d_fprint(void *f, v1d a);
inline void __v1f_fprint(void *f, v1f a);
inline void __v1i_fprint(void *f, v1i a);
inline void __v1l_fprint(void *f, v1l a);
inline void __v2d_fprint(void *f, v2d a);
inline void __v2f_fprint(void *f, v2f a);
inline void __v2i_fprint(void *f, v2i a);
inline void __v2l_fprint(void *f, v2l a);
inline void __v4d_fprint(void *f, v4d a);
inline void __v4f_fprint(void *f, v4f a);
inline void __v4i_fprint(void *f, v4i a);
inline void __v4l_fprint(void *f, v4l a);
inline void __v8d_fprint(void *f, v8d a);
inline void __v8f_fprint(void *f, v8f a);
inline void __v8i_fprint(void *f, v8i a);
inline void __v8l_fprint(void *f, v8l a);
inline void __v16f_fprint(void *f, v16f a);
inline void __v16i_fprint(void *f, v16i a);

inline void __v1d_rfprint(void *f, v1d a);
inline void __v1f_rfprint(void *f, v1f a);
inline void __v1i_rfprint(void *f, v1i a);
inline void __v1l_rfprint(void *f, v1l a);
inline void __v2d_rfprint(void *f, v2d a);
inline void __v2f_rfprint(void *f, v2f a);
inline void __v2i_rfprint(void *f, v2i a);
inline void __v2l_rfprint(void *f, v2l a);
inline void __v4d_rfprint(void *f, v4d a);
inline void __v4f_rfprint(void *f, v4f a);
inline void __v4i_rfprint(void *f, v4i a);
inline void __v4l_rfprint(void *f, v4l a);
inline void __v8d_rfprint(void *f, v8d a);
inline void __v8f_rfprint(void *f, v8f a);
inline void __v8i_rfprint(void *f, v8i a);
inline void __v8l_rfprint(void *f, v8l a);
inline void __v16f_rfprint(void *f, v16f a);
inline void __v16i_rfprint(void *f, v16i a);





// Casts ans Conversions implementations

inline v1d __v1d_cast_v2d(struct __v2d a) { return a.a; }
inline v1f __v1f_cast_v2f(struct __v2f a) { return a.a; }
inline v1i __v1i_cast_v2i(struct __v2i a) { return a.a; }
inline v1l __v1l_cast_v2l(struct __v2l a) { return a.a; }
inline struct __v2d __v2d_cast_v1d(v1d a) { struct __v2d r = { a: a }; return r; }
inline v2d __v2d_cast_v4d(struct __v4d a) { return a.a; }
inline struct __v2f __v2f_cast_v1f(v1f a) { struct __v2f r = { a: a }; return r; }
inline v2f __v2f_cast_v4f(struct __v4f a) { return a.a; }
inline struct __v2i __v2i_cast_v1i(v1i a) { struct __v2i r = { a: a }; return r; }
inline v2i __v2i_cast_v4i(struct __v4i a) { return a.a; }
inline struct __v2l __v2l_cast_v1l(v1l a) { struct __v2l r = { a: a }; return r; }
inline v2l __v2l_cast_v4l(struct __v4l a) { return a.a; }
inline struct __v4d __v4d_cast_v2d(v2d a) { struct __v4d r = { a: a }; return r; }
inline v4d __v4d_cast_v8d(struct __v8d a) { return a.a; }
inline struct __v4f __v4f_cast_v2f(v2f a) { struct __v4f r = { a: a }; return r; }
inline v4f __v4f_cast_v8f(struct __v8f a) { return a.a; }
inline struct __v4i __v4i_cast_v2i(v2i a) { struct __v4i r = { a: a }; return r; }
inline v4i __v4i_cast_v8i(struct __v8i a) { return a.a; }
inline struct __v4l __v4l_cast_v2l(v2l a) { struct __v4l r = { a: a }; return r; }
inline v4l __v4l_cast_v8l(struct __v8l a) { return a.a; }
inline struct __v8d __v8d_cast_v4d(v4d a) { struct __v8d r = { a: a }; return r; }
inline struct __v8f __v8f_cast_v4f(v4f a) { struct __v8f r = { a: a }; return r; }
inline v8f __v8f_cast_v16f(struct __v16f a) { return a.a; }
inline struct __v8i __v8i_cast_v4i(v4i a) { struct __v8i r = { a: a }; return r; }
inline v8i __v8i_cast_v16i(struct __v16i a) { return a.a; }
inline struct __v8l __v8l_cast_v4l(v4l a) { struct __v8l r = { a: a }; return r; }
inline struct __v16f __v16f_cast_v8f(v8f a) { struct __v16f r = { a: a }; return r; }
inline struct __v16i __v16i_cast_v8i(v8i a) { struct __v16i r = { a: a }; return r; }

inline double __sd_cvt_v1d(v1d a) {
  int i;
  double sv1d;
  v1d_store(&sv1d, a);
  return sv1d;
}
inline v1d __v1d_cvt_v1f(v1f a) {
  int i;
  double sv1d;
  float sv1f;
  v1f_store(&sv1f, a);
  sv1d = sv1f;
  return v1d_load(&sv1d);
}
inline v1d __v1d_cvt_v1i(v1i a) {
  int i;
  double sv1d;
  int32_t sv1i;
  v1i_store(&sv1i, a);
  sv1d = sv1i;
  return v1d_load(&sv1d);
}
inline v1d __v1d_cvt_v1l(v1l a) {
  int i;
  double sv1d;
  int64_t sv1l;
  v1l_store(&sv1l, a);
  sv1d = sv1l;
  return v1d_load(&sv1d);
}
inline v1f __v1f_cvt_v1d(v1d a) {
  int i;
  float sv1f;
  double sv1d;
  v1d_store(&sv1d, a);
  sv1f = sv1d;
  return v1f_load(&sv1f);
}
inline float __sf_cvt_v1f(v1f a) {
  int i;
  float sv1f;
  v1f_store(&sv1f, a);
  return sv1f;
}
inline v1f __v1f_cvt_v1i(v1i a) {
  int i;
  float sv1f;
  int32_t sv1i;
  v1i_store(&sv1i, a);
  sv1f = sv1i;
  return v1f_load(&sv1f);
}
inline v1f __v1f_cvt_v1l(v1l a) {
  int i;
  float sv1f;
  int64_t sv1l;
  v1l_store(&sv1l, a);
  sv1f = sv1l;
  return v1f_load(&sv1f);
}
inline v1i __v1i_cvt_v1d(v1d a) {
  int i;
  int32_t sv1i;
  double sv1d;
  v1d_store(&sv1d, a);
  sv1i = sv1d;
  return v1i_load(&sv1i);
}
inline v1i __v1i_cvt_v1f(v1f a) {
  int i;
  int32_t sv1i;
  float sv1f;
  v1f_store(&sv1f, a);
  sv1i = sv1f;
  return v1i_load(&sv1i);
}
inline int32_t __si_cvt_v1i(v1i a) {
  int i;
  int32_t sv1i;
  v1i_store(&sv1i, a);
  return sv1i;
}
inline v1i __v1i_cvt_v1l(v1l a) {
  int i;
  int32_t sv1i;
  int64_t sv1l;
  v1l_store(&sv1l, a);
  sv1i = sv1l;
  return v1i_load(&sv1i);
}
inline v1l __v1l_cvt_v1d(v1d a) {
  int i;
  int64_t sv1l;
  double sv1d;
  v1d_store(&sv1d, a);
  sv1l = sv1d;
  return v1l_load(&sv1l);
}
inline v1l __v1l_cvt_v1f(v1f a) {
  int i;
  int64_t sv1l;
  float sv1f;
  v1f_store(&sv1f, a);
  sv1l = sv1f;
  return v1l_load(&sv1l);
}
inline v1l __v1l_cvt_v1i(v1i a) {
  int i;
  int64_t sv1l;
  int32_t sv1i;
  v1i_store(&sv1i, a);
  sv1l = sv1i;
  return v1l_load(&sv1l);
}
inline int64_t __sl_cvt_v1l(v1l a) {
  int i;
  int64_t sv1l;
  v1l_store(&sv1l, a);
  return sv1l;
}



// Builtins implementations

inline union __v1d __v1d_load(const double *p) { union __v1d r = { v: *p }; return r; }
inline union __v1f __v1f_load(const float *p) { union __v1f r = { v: *p }; return r; }
inline union __v1i __v1i_load(const int32_t *p) { union __v1i r = { v: *p }; return r; }
inline union __v1l __v1l_load(const int64_t *p) { union __v1l r = { v: *p }; return r; }

inline v2d __v2d_load(const double *p) { return v2d_merge_v1d(v1d_load(p), v1d_load(p+1)); }
inline v2f __v2f_load(const float *p) { return v2f_merge_v1f(v1f_load(p), v1f_load(p+1)); }
inline v2i __v2i_load(const int32_t *p) { return v2i_merge_v1i(v1i_load(p), v1i_load(p+1)); }
inline v2l __v2l_load(const int64_t *p) { return v2l_merge_v1l(v1l_load(p), v1l_load(p+1)); }
inline v4d __v4d_load(const double *p) { return v4d_merge_v2d(v2d_load(p), v2d_load(p+2)); }
inline v4f __v4f_load(const float *p) { return v4f_merge_v2f(v2f_load(p), v2f_load(p+2)); }
inline v4i __v4i_load(const int32_t *p) { return v4i_merge_v2i(v2i_load(p), v2i_load(p+2)); }
inline v4l __v4l_load(const int64_t *p) { return v4l_merge_v2l(v2l_load(p), v2l_load(p+2)); }
inline v8d __v8d_load(const double *p) { return v8d_merge_v4d(v4d_load(p), v4d_load(p+4)); }
inline v8f __v8f_load(const float *p) { return v8f_merge_v4f(v4f_load(p), v4f_load(p+4)); }
inline v8i __v8i_load(const int32_t *p) { return v8i_merge_v4i(v4i_load(p), v4i_load(p+4)); }
inline v8l __v8l_load(const int64_t *p) { return v8l_merge_v4l(v4l_load(p), v4l_load(p+4)); }
inline v16f __v16f_load(const float *p) { return v16f_merge_v8f(v8f_load(p), v8f_load(p+8)); }
inline v16i __v16i_load(const int32_t *p) { return v16i_merge_v8i(v8i_load(p), v8i_load(p+8)); }


inline v1d compatible_v1d_loadu(const double *p) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 1, 1*sizeof(double));
  for (i = 0; i < 1; ++i) v[i] = p[i];
  return v1d_load(v);
}
inline v1f compatible_v1f_loadu(const float *p) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 1, 1*sizeof(float));
  for (i = 0; i < 1; ++i) v[i] = p[i];
  return v1f_load(v);
}
inline v1i compatible_v1i_loadu(const int32_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 1, 1*sizeof(int32_t));
  for (i = 0; i < 1; ++i) v[i] = p[i];
  return v1i_load(v);
}
inline v1l compatible_v1l_loadu(const int64_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 1, 1*sizeof(int64_t));
  for (i = 0; i < 1; ++i) v[i] = p[i];
  return v1l_load(v);
}
inline v2d compatible_v2d_loadu(const double *p) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  for (i = 0; i < 2; ++i) v[i] = p[i];
  return v2d_load(v);
}
inline v2f compatible_v2f_loadu(const float *p) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  for (i = 0; i < 2; ++i) v[i] = p[i];
  return v2f_load(v);
}
inline v2i compatible_v2i_loadu(const int32_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  for (i = 0; i < 2; ++i) v[i] = p[i];
  return v2i_load(v);
}
inline v2l compatible_v2l_loadu(const int64_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  for (i = 0; i < 2; ++i) v[i] = p[i];
  return v2l_load(v);
}
inline v4d compatible_v4d_loadu(const double *p) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  for (i = 0; i < 4; ++i) v[i] = p[i];
  return v4d_load(v);
}
inline v4f compatible_v4f_loadu(const float *p) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  for (i = 0; i < 4; ++i) v[i] = p[i];
  return v4f_load(v);
}
inline v4i compatible_v4i_loadu(const int32_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  for (i = 0; i < 4; ++i) v[i] = p[i];
  return v4i_load(v);
}
inline v4l compatible_v4l_loadu(const int64_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  for (i = 0; i < 4; ++i) v[i] = p[i];
  return v4l_load(v);
}
inline v8d compatible_v8d_loadu(const double *p) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  for (i = 0; i < 8; ++i) v[i] = p[i];
  return v8d_load(v);
}
inline v8f compatible_v8f_loadu(const float *p) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  for (i = 0; i < 8; ++i) v[i] = p[i];
  return v8f_load(v);
}
inline v8i compatible_v8i_loadu(const int32_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  for (i = 0; i < 8; ++i) v[i] = p[i];
  return v8i_load(v);
}
inline v8l compatible_v8l_loadu(const int64_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  for (i = 0; i < 8; ++i) v[i] = p[i];
  return v8l_load(v);
}
inline v16f compatible_v16f_loadu(const float *p) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  for (i = 0; i < 16; ++i) v[i] = p[i];
  return v16f_load(v);
}
inline v16i compatible_v16i_loadu(const int32_t *p) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  for (i = 0; i < 16; ++i) v[i] = p[i];
  return v16i_load(v);
}


inline void __v1d_store(double *p, union __v1d a) { *p = a.v; }
inline void __v1f_store(float *p, union __v1f a) { *p = a.v; }
inline void __v1i_store(int32_t *p, union __v1i a) { *p = a.v; }
inline void __v1l_store(int64_t *p, union __v1l a) { *p = a.v; }

inline void __v2d_store(double *p, v2d a) { v1d_store(p, v1d_get_low_v2d(a)); v1d_store(p+1, v1d_get_high_v2d(a)); }
inline void __v2f_store(float *p, v2f a) { v1f_store(p, v1f_get_low_v2f(a)); v1f_store(p+1, v1f_get_high_v2f(a)); }
inline void __v2i_store(int32_t *p, v2i a) { v1i_store(p, v1i_get_low_v2i(a)); v1i_store(p+1, v1i_get_high_v2i(a)); }
inline void __v2l_store(int64_t *p, v2l a) { v1l_store(p, v1l_get_low_v2l(a)); v1l_store(p+1, v1l_get_high_v2l(a)); }
inline void __v4d_store(double *p, v4d a) { v2d_store(p, v2d_get_low_v4d(a)); v2d_store(p+2, v2d_get_high_v4d(a)); }
inline void __v4f_store(float *p, v4f a) { v2f_store(p, v2f_get_low_v4f(a)); v2f_store(p+2, v2f_get_high_v4f(a)); }
inline void __v4i_store(int32_t *p, v4i a) { v2i_store(p, v2i_get_low_v4i(a)); v2i_store(p+2, v2i_get_high_v4i(a)); }
inline void __v4l_store(int64_t *p, v4l a) { v2l_store(p, v2l_get_low_v4l(a)); v2l_store(p+2, v2l_get_high_v4l(a)); }
inline void __v8d_store(double *p, v8d a) { v4d_store(p, v4d_get_low_v8d(a)); v4d_store(p+4, v4d_get_high_v8d(a)); }
inline void __v8f_store(float *p, v8f a) { v4f_store(p, v4f_get_low_v8f(a)); v4f_store(p+4, v4f_get_high_v8f(a)); }
inline void __v8i_store(int32_t *p, v8i a) { v4i_store(p, v4i_get_low_v8i(a)); v4i_store(p+4, v4i_get_high_v8i(a)); }
inline void __v8l_store(int64_t *p, v8l a) { v4l_store(p, v4l_get_low_v8l(a)); v4l_store(p+4, v4l_get_high_v8l(a)); }
inline void __v16f_store(float *p, v16f a) { v8f_store(p, v8f_get_low_v16f(a)); v8f_store(p+8, v8f_get_high_v16f(a)); }
inline void __v16i_store(int32_t *p, v16i a) { v8i_store(p, v8i_get_low_v16i(a)); v8i_store(p+8, v8i_get_high_v16i(a)); }


inline void compatible_v1d_storeu(double *p, v1d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 1, 1*sizeof(double));
  v1d_store(v, a);
  for (i = 0; i < 1; ++i) p[i] = v[i];
}
inline void compatible_v1f_storeu(float *p, v1f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 1, 1*sizeof(float));
  v1f_store(v, a);
  for (i = 0; i < 1; ++i) p[i] = v[i];
}
inline void compatible_v1i_storeu(int32_t *p, v1i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 1, 1*sizeof(int32_t));
  v1i_store(v, a);
  for (i = 0; i < 1; ++i) p[i] = v[i];
}
inline void compatible_v1l_storeu(int64_t *p, v1l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 1, 1*sizeof(int64_t));
  v1l_store(v, a);
  for (i = 0; i < 1; ++i) p[i] = v[i];
}
inline void compatible_v2d_storeu(double *p, v2d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  v2d_store(v, a);
  for (i = 0; i < 2; ++i) p[i] = v[i];
}
inline void compatible_v2f_storeu(float *p, v2f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  v2f_store(v, a);
  for (i = 0; i < 2; ++i) p[i] = v[i];
}
inline void compatible_v2i_storeu(int32_t *p, v2i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  v2i_store(v, a);
  for (i = 0; i < 2; ++i) p[i] = v[i];
}
inline void compatible_v2l_storeu(int64_t *p, v2l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  v2l_store(v, a);
  for (i = 0; i < 2; ++i) p[i] = v[i];
}
inline void compatible_v4d_storeu(double *p, v4d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  v4d_store(v, a);
  for (i = 0; i < 4; ++i) p[i] = v[i];
}
inline void compatible_v4f_storeu(float *p, v4f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  v4f_store(v, a);
  for (i = 0; i < 4; ++i) p[i] = v[i];
}
inline void compatible_v4i_storeu(int32_t *p, v4i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  v4i_store(v, a);
  for (i = 0; i < 4; ++i) p[i] = v[i];
}
inline void compatible_v4l_storeu(int64_t *p, v4l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  v4l_store(v, a);
  for (i = 0; i < 4; ++i) p[i] = v[i];
}
inline void compatible_v8d_storeu(double *p, v8d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  v8d_store(v, a);
  for (i = 0; i < 8; ++i) p[i] = v[i];
}
inline void compatible_v8f_storeu(float *p, v8f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  v8f_store(v, a);
  for (i = 0; i < 8; ++i) p[i] = v[i];
}
inline void compatible_v8i_storeu(int32_t *p, v8i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  v8i_store(v, a);
  for (i = 0; i < 8; ++i) p[i] = v[i];
}
inline void compatible_v8l_storeu(int64_t *p, v8l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  v8l_store(v, a);
  for (i = 0; i < 8; ++i) p[i] = v[i];
}
inline void compatible_v16f_storeu(float *p, v16f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  v16f_store(v, a);
  for (i = 0; i < 16; ++i) p[i] = v[i];
}
inline void compatible_v16i_storeu(int32_t *p, v16i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  v16i_store(v, a);
  for (i = 0; i < 16; ++i) p[i] = v[i];
}

inline v1d __v1d_set(double a) { return v1d_load(&a); }
inline v1f __v1f_set(float a) { return v1f_load(&a); }
inline v1i __v1i_set(int32_t a) { return v1i_load(&a); }
inline v1l __v1l_set(int64_t a) { return v1l_load(&a); }








inline struct __v2d __v2d_merge2_v1d(v1d low, v1d high) { struct __v2d r = { a: low, b: high }; return r; }
inline struct __v2f __v2f_merge2_v1f(v1f low, v1f high) { struct __v2f r = { a: low, b: high }; return r; }
inline struct __v2i __v2i_merge2_v1i(v1i low, v1i high) { struct __v2i r = { a: low, b: high }; return r; }
inline struct __v2l __v2l_merge2_v1l(v1l low, v1l high) { struct __v2l r = { a: low, b: high }; return r; }
inline struct __v4d __v4d_merge2_v2d(v2d low, v2d high) { struct __v4d r = { a: low, b: high }; return r; }
inline struct __v4f __v4f_merge2_v2f(v2f low, v2f high) { struct __v4f r = { a: low, b: high }; return r; }
inline struct __v4i __v4i_merge2_v2i(v2i low, v2i high) { struct __v4i r = { a: low, b: high }; return r; }
inline struct __v4l __v4l_merge2_v2l(v2l low, v2l high) { struct __v4l r = { a: low, b: high }; return r; }
inline struct __v8d __v8d_merge2_v4d(v4d low, v4d high) { struct __v8d r = { a: low, b: high }; return r; }
inline struct __v8f __v8f_merge2_v4f(v4f low, v4f high) { struct __v8f r = { a: low, b: high }; return r; }
inline struct __v8i __v8i_merge2_v4i(v4i low, v4i high) { struct __v8i r = { a: low, b: high }; return r; }
inline struct __v8l __v8l_merge2_v4l(v4l low, v4l high) { struct __v8l r = { a: low, b: high }; return r; }
inline struct __v16f __v16f_merge2_v8f(v8f low, v8f high) { struct __v16f r = { a: low, b: high }; return r; }
inline struct __v16i __v16i_merge2_v8i(v8i low, v8i high) { struct __v16i r = { a: low, b: high }; return r; }












inline v1d compatible_v1d_get_low_v2d(v2d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  v2d_store(v, a);
  return v1d_load(v);
}
inline v1f compatible_v1f_get_low_v2f(v2f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  v2f_store(v, a);
  return v1f_load(v);
}
inline v1i compatible_v1i_get_low_v2i(v2i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  v2i_store(v, a);
  return v1i_load(v);
}
inline v1l compatible_v1l_get_low_v2l(v2l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  v2l_store(v, a);
  return v1l_load(v);
}
inline v2d compatible_v2d_get_low_v4d(v4d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  v4d_store(v, a);
  return v2d_load(v);
}
inline v2f compatible_v2f_get_low_v4f(v4f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  v4f_store(v, a);
  return v2f_load(v);
}
inline v2i compatible_v2i_get_low_v4i(v4i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  v4i_store(v, a);
  return v2i_load(v);
}
inline v2l compatible_v2l_get_low_v4l(v4l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  v4l_store(v, a);
  return v2l_load(v);
}
inline v4d compatible_v4d_get_low_v8d(v8d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  v8d_store(v, a);
  return v4d_load(v);
}
inline v4f compatible_v4f_get_low_v8f(v8f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  v8f_store(v, a);
  return v4f_load(v);
}
inline v4i compatible_v4i_get_low_v8i(v8i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  v8i_store(v, a);
  return v4i_load(v);
}
inline v4l compatible_v4l_get_low_v8l(v8l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  v8l_store(v, a);
  return v4l_load(v);
}
inline v8f compatible_v8f_get_low_v16f(v16f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  v16f_store(v, a);
  return v8f_load(v);
}
inline v8i compatible_v8i_get_low_v16i(v16i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  v16i_store(v, a);
  return v8i_load(v);
}

inline v1d __v1d_get_high_v2d(struct __v2d a) { return a.b; }
inline v1f __v1f_get_high_v2f(struct __v2f a) { return a.b; }
inline v1i __v1i_get_high_v2i(struct __v2i a) { return a.b; }
inline v1l __v1l_get_high_v2l(struct __v2l a) { return a.b; }
inline v2d __v2d_get_high_v4d(struct __v4d a) { return a.b; }
inline v2f __v2f_get_high_v4f(struct __v4f a) { return a.b; }
inline v2i __v2i_get_high_v4i(struct __v4i a) { return a.b; }
inline v2l __v2l_get_high_v4l(struct __v4l a) { return a.b; }
inline v4d __v4d_get_high_v8d(struct __v8d a) { return a.b; }
inline v4f __v4f_get_high_v8f(struct __v8f a) { return a.b; }
inline v4i __v4i_get_high_v8i(struct __v8i a) { return a.b; }
inline v4l __v4l_get_high_v8l(struct __v8l a) { return a.b; }
inline v8f __v8f_get_high_v16f(struct __v16f a) { return a.b; }
inline v8i __v8i_get_high_v16i(struct __v16i a) { return a.b; }

inline v1d compatible_v1d_get_high_v2d(v2d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  v2d_store(v, a);
  return v1d_load(v+1);
}
inline v1f compatible_v1f_get_high_v2f(v2f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  v2f_store(v, a);
  return v1f_load(v+1);
}
inline v1i compatible_v1i_get_high_v2i(v2i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  v2i_store(v, a);
  return v1i_load(v+1);
}
inline v1l compatible_v1l_get_high_v2l(v2l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  v2l_store(v, a);
  return v1l_load(v+1);
}
inline v2d compatible_v2d_get_high_v4d(v4d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  v4d_store(v, a);
  return v2d_load(v+2);
}
inline v2f compatible_v2f_get_high_v4f(v4f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  v4f_store(v, a);
  return v2f_load(v+2);
}
inline v2i compatible_v2i_get_high_v4i(v4i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  v4i_store(v, a);
  return v2i_load(v+2);
}
inline v2l compatible_v2l_get_high_v4l(v4l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  v4l_store(v, a);
  return v2l_load(v+2);
}
inline v4d compatible_v4d_get_high_v8d(v8d a) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  v8d_store(v, a);
  return v4d_load(v+4);
}
inline v4f compatible_v4f_get_high_v8f(v8f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  v8f_store(v, a);
  return v4f_load(v+4);
}
inline v4i compatible_v4i_get_high_v8i(v8i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  v8i_store(v, a);
  return v4i_load(v+4);
}
inline v4l compatible_v4l_get_high_v8l(v8l a) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  v8l_store(v, a);
  return v4l_load(v+4);
}
inline v8f compatible_v8f_get_high_v16f(v16f a) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  v16f_store(v, a);
  return v8f_load(v+8);
}
inline v8i compatible_v8i_get_high_v16i(v16i a) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  v16i_store(v, a);
  return v8i_load(v+8);
}







inline v2d compatible_v2d_merge_v1d(v1d low, v1d high) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  v1d_store(v, low);
  v1d_store(v + 1, high);
  return v2d_load(v);
}
inline v2f compatible_v2f_merge_v1f(v1f low, v1f high) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  v1f_store(v, low);
  v1f_store(v + 1, high);
  return v2f_load(v);
}
inline v2i compatible_v2i_merge_v1i(v1i low, v1i high) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  v1i_store(v, low);
  v1i_store(v + 1, high);
  return v2i_load(v);
}
inline v2l compatible_v2l_merge_v1l(v1l low, v1l high) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  v1l_store(v, low);
  v1l_store(v + 1, high);
  return v2l_load(v);
}
inline v4d compatible_v4d_merge_v2d(v2d low, v2d high) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  v2d_store(v, low);
  v2d_store(v + 2, high);
  return v4d_load(v);
}
inline v4f compatible_v4f_merge_v2f(v2f low, v2f high) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  v2f_store(v, low);
  v2f_store(v + 2, high);
  return v4f_load(v);
}
inline v4i compatible_v4i_merge_v2i(v2i low, v2i high) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  v2i_store(v, low);
  v2i_store(v + 2, high);
  return v4i_load(v);
}
inline v4l compatible_v4l_merge_v2l(v2l low, v2l high) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  v2l_store(v, low);
  v2l_store(v + 2, high);
  return v4l_load(v);
}
inline v8d compatible_v8d_merge_v4d(v4d low, v4d high) {
  int i;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  v4d_store(v, low);
  v4d_store(v + 4, high);
  return v8d_load(v);
}
inline v8f compatible_v8f_merge_v4f(v4f low, v4f high) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  v4f_store(v, low);
  v4f_store(v + 4, high);
  return v8f_load(v);
}
inline v8i compatible_v8i_merge_v4i(v4i low, v4i high) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  v4i_store(v, low);
  v4i_store(v + 4, high);
  return v8i_load(v);
}
inline v8l compatible_v8l_merge_v4l(v4l low, v4l high) {
  int i;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  v4l_store(v, low);
  v4l_store(v + 4, high);
  return v8l_load(v);
}
inline v16f compatible_v16f_merge_v8f(v8f low, v8f high) {
  int i;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  v8f_store(v, low);
  v8f_store(v + 8, high);
  return v16f_load(v);
}
inline v16i compatible_v16i_merge_v8i(v8i low, v8i high) {
  int i;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  v8i_store(v, low);
  v8i_store(v + 8, high);
  return v16i_load(v);
}











































inline union __v1d __v1d_eq(union __v1d a, union __v1d b) { union __v1d r = { i: -(a.v == b.v) }; return r; }
inline union __v1f __v1f_eq(union __v1f a, union __v1f b) { union __v1f r = { i: -(a.v == b.v) }; return r; }
inline union __v1i __v1i_eq(union __v1i a, union __v1i b) { union __v1i r = { i: -(a.v == b.v) }; return r; }
inline union __v1l __v1l_eq(union __v1l a, union __v1l b) { union __v1l r = { i: -(a.v == b.v) }; return r; }


inline union __v1d __v1d_neq(union __v1d a, union __v1d b) { union __v1d r = { i: -(a.v != b.v) }; return r; }
inline union __v1f __v1f_neq(union __v1f a, union __v1f b) { union __v1f r = { i: -(a.v != b.v) }; return r; }
inline union __v1i __v1i_neq(union __v1i a, union __v1i b) { union __v1i r = { i: -(a.v != b.v) }; return r; }
inline union __v1l __v1l_neq(union __v1l a, union __v1l b) { union __v1l r = { i: -(a.v != b.v) }; return r; }


inline union __v1d __v1d_gt(union __v1d a, union __v1d b) { union __v1d r = { i: -(a.v >  b.v) }; return r; }
inline union __v1f __v1f_gt(union __v1f a, union __v1f b) { union __v1f r = { i: -(a.v >  b.v) }; return r; }
inline union __v1i __v1i_gt(union __v1i a, union __v1i b) { union __v1i r = { i: -(a.v >  b.v) }; return r; }
inline union __v1l __v1l_gt(union __v1l a, union __v1l b) { union __v1l r = { i: -(a.v >  b.v) }; return r; }


inline union __v1d __v1d_geq(union __v1d a, union __v1d b) { union __v1d r = { i: -(a.v >= b.v) }; return r; }
inline union __v1f __v1f_geq(union __v1f a, union __v1f b) { union __v1f r = { i: -(a.v >= b.v) }; return r; }
inline union __v1i __v1i_geq(union __v1i a, union __v1i b) { union __v1i r = { i: -(a.v >= b.v) }; return r; }
inline union __v1l __v1l_geq(union __v1l a, union __v1l b) { union __v1l r = { i: -(a.v >= b.v) }; return r; }


inline union __v1d __v1d_lt(union __v1d a, union __v1d b) { union __v1d r = { i: -(a.v <  b.v) }; return r; }
inline union __v1f __v1f_lt(union __v1f a, union __v1f b) { union __v1f r = { i: -(a.v <  b.v) }; return r; }
inline union __v1i __v1i_lt(union __v1i a, union __v1i b) { union __v1i r = { i: -(a.v <  b.v) }; return r; }
inline union __v1l __v1l_lt(union __v1l a, union __v1l b) { union __v1l r = { i: -(a.v <  b.v) }; return r; }


inline union __v1d __v1d_leq(union __v1d a, union __v1d b) { union __v1d r = { i: -(a.v <= b.v) }; return r; }
inline union __v1f __v1f_leq(union __v1f a, union __v1f b) { union __v1f r = { i: -(a.v <= b.v) }; return r; }
inline union __v1i __v1i_leq(union __v1i a, union __v1i b) { union __v1i r = { i: -(a.v <= b.v) }; return r; }
inline union __v1l __v1l_leq(union __v1l a, union __v1l b) { union __v1l r = { i: -(a.v <= b.v) }; return r; }


inline union __v1d __v1d_and(union __v1d a, union __v1d b) { union __v1d r = { i: a.i & b.i }; return r; }
inline union __v1f __v1f_and(union __v1f a, union __v1f b) { union __v1f r = { i: a.i & b.i }; return r; }
inline union __v1i __v1i_and(union __v1i a, union __v1i b) { union __v1i r = { i: a.i & b.i }; return r; }
inline union __v1l __v1l_and(union __v1l a, union __v1l b) { union __v1l r = { i: a.i & b.i }; return r; }


inline union __v1d __v1d_or(union __v1d a, union __v1d b) { union __v1d r = { i: a.i | b.i }; return r; }
inline union __v1f __v1f_or(union __v1f a, union __v1f b) { union __v1f r = { i: a.i | b.i }; return r; }
inline union __v1i __v1i_or(union __v1i a, union __v1i b) { union __v1i r = { i: a.i | b.i }; return r; }
inline union __v1l __v1l_or(union __v1l a, union __v1l b) { union __v1l r = { i: a.i | b.i }; return r; }


inline union __v1d __v1d_xor(union __v1d a, union __v1d b) { union __v1d r = { i: a.i ^ b.i }; return r; }
inline union __v1f __v1f_xor(union __v1f a, union __v1f b) { union __v1f r = { i: a.i ^ b.i }; return r; }
inline union __v1i __v1i_xor(union __v1i a, union __v1i b) { union __v1i r = { i: a.i ^ b.i }; return r; }
inline union __v1l __v1l_xor(union __v1l a, union __v1l b) { union __v1l r = { i: a.i ^ b.i }; return r; }








inline union __v1d __v1d_add(union __v1d a, union __v1d b) { union __v1d r = { v: a.v + b.v }; return r; }
inline union __v1f __v1f_add(union __v1f a, union __v1f b) { union __v1f r = { v: a.v + b.v }; return r; }
inline union __v1i __v1i_add(union __v1i a, union __v1i b) { union __v1i r = { v: a.v + b.v }; return r; }
inline union __v1l __v1l_add(union __v1l a, union __v1l b) { union __v1l r = { v: a.v + b.v }; return r; }


inline union __v1d __v1d_sub(union __v1d a, union __v1d b) { union __v1d r = { v: a.v - b.v }; return r; }
inline union __v1f __v1f_sub(union __v1f a, union __v1f b) { union __v1f r = { v: a.v - b.v }; return r; }
inline union __v1i __v1i_sub(union __v1i a, union __v1i b) { union __v1i r = { v: a.v - b.v }; return r; }
inline union __v1l __v1l_sub(union __v1l a, union __v1l b) { union __v1l r = { v: a.v - b.v }; return r; }


inline union __v1d __v1d_mul(union __v1d a, union __v1d b) { union __v1d r = { v: a.v * b.v }; return r; }
inline union __v1f __v1f_mul(union __v1f a, union __v1f b) { union __v1f r = { v: a.v * b.v }; return r; }
inline union __v1i __v1i_mul(union __v1i a, union __v1i b) { union __v1i r = { v: a.v * b.v }; return r; }
inline union __v1l __v1l_mul(union __v1l a, union __v1l b) { union __v1l r = { v: a.v * b.v }; return r; }


inline union __v1d __v1d_div(union __v1d a, union __v1d b) { union __v1d r = { v: a.v / b.v }; return r; }
inline union __v1f __v1f_div(union __v1f a, union __v1f b) { union __v1f r = { v: a.v / b.v }; return r; }
inline union __v1i __v1i_div(union __v1i a, union __v1i b) { union __v1i r = { v: a.v / b.v }; return r; }
inline union __v1l __v1l_div(union __v1l a, union __v1l b) { union __v1l r = { v: a.v / b.v }; return r; }


inline union __v1d __v1d_sqrt(union __v1d a) { union __v1d r = { v: sqrt(a.v) }; return r; }
inline union __v1f __v1f_sqrt(union __v1f a) { union __v1f r = { v: sqrt(a.v) }; return r; }












inline void __v1d_fprint(void *f, v1d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 1, 1*sizeof(double));
  v1d_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[i]);
  }
}
inline void __v1f_fprint(void *f, v1f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 1, 1*sizeof(float));
  v1f_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[i]);
  }
}
inline void __v1i_fprint(void *f, v1i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 1, 1*sizeof(int32_t));
  v1i_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[i]);
  }
}
inline void __v1l_fprint(void *f, v1l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 1, 1*sizeof(int64_t));
  v1l_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[i]);
  }
}
inline void __v2d_fprint(void *f, v2d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  v2d_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[i]);
  }
}
inline void __v2f_fprint(void *f, v2f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  v2f_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[i]);
  }
}
inline void __v2i_fprint(void *f, v2i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  v2i_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[i]);
  }
}
inline void __v2l_fprint(void *f, v2l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  v2l_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[i]);
  }
}
inline void __v4d_fprint(void *f, v4d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  v4d_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[i]);
  }
}
inline void __v4f_fprint(void *f, v4f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  v4f_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[i]);
  }
}
inline void __v4i_fprint(void *f, v4i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  v4i_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[i]);
  }
}
inline void __v4l_fprint(void *f, v4l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  v4l_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[i]);
  }
}
inline void __v8d_fprint(void *f, v8d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  v8d_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[i]);
  }
}
inline void __v8f_fprint(void *f, v8f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  v8f_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[i]);
  }
}
inline void __v8i_fprint(void *f, v8i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  v8i_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[i]);
  }
}
inline void __v8l_fprint(void *f, v8l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  v8l_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[i]);
  }
}
inline void __v16f_fprint(void *f, v16f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  v16f_store(v, a);
  for (i = 0; i < 16; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[i]);
  }
}
inline void __v16i_fprint(void *f, v16i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  v16i_store(v, a);
  for (i = 0; i < 16; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[i]);
  }
}

inline void __v1d_rfprint(void *f, v1d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 1, 1*sizeof(double));
  v1d_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[0-i]);
  }
}
inline void __v1f_rfprint(void *f, v1f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 1, 1*sizeof(float));
  v1f_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[0-i]);
  }
}
inline void __v1i_rfprint(void *f, v1i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 1, 1*sizeof(int32_t));
  v1i_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[0-i]);
  }
}
inline void __v1l_rfprint(void *f, v1l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 1, 1*sizeof(int64_t));
  v1l_store(v, a);
  for (i = 0; i < 1; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[0-i]);
  }
}
inline void __v2d_rfprint(void *f, v2d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 2, 2*sizeof(double));
  v2d_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[1-i]);
  }
}
inline void __v2f_rfprint(void *f, v2f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 2, 2*sizeof(float));
  v2f_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[1-i]);
  }
}
inline void __v2i_rfprint(void *f, v2i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 2, 2*sizeof(int32_t));
  v2i_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[1-i]);
  }
}
inline void __v2l_rfprint(void *f, v2l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 2, 2*sizeof(int64_t));
  v2l_store(v, a);
  for (i = 0; i < 2; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[1-i]);
  }
}
inline void __v4d_rfprint(void *f, v4d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 4, 4*sizeof(double));
  v4d_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[3-i]);
  }
}
inline void __v4f_rfprint(void *f, v4f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 4, 4*sizeof(float));
  v4f_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[3-i]);
  }
}
inline void __v4i_rfprint(void *f, v4i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 4, 4*sizeof(int32_t));
  v4i_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[3-i]);
  }
}
inline void __v4l_rfprint(void *f, v4l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 4, 4*sizeof(int64_t));
  v4l_store(v, a);
  for (i = 0; i < 4; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[3-i]);
  }
}
inline void __v8d_rfprint(void *f, v8d a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(double, v, 8, 8*sizeof(double));
  v8d_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lf", v[7-i]);
  }
}
inline void __v8f_rfprint(void *f, v8f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 8, 8*sizeof(float));
  v8f_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[7-i]);
  }
}
inline void __v8i_rfprint(void *f, v8i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 8, 8*sizeof(int32_t));
  v8i_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[7-i]);
  }
}
inline void __v8l_rfprint(void *f, v8l a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int64_t, v, 8, 8*sizeof(int64_t));
  v8l_store(v, a);
  for (i = 0; i < 8; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%lli", v[7-i]);
  }
}
inline void __v16f_rfprint(void *f, v16f a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(float, v, 16, 16*sizeof(float));
  v16f_store(v, a);
  for (i = 0; i < 16; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%f", v[15-i]);
  }
}
inline void __v16i_rfprint(void *f, v16i a) {
  int i, comma = 0;
  PINTS_ALIGNED_ARRAY(int32_t, v, 16, 16*sizeof(int32_t));
  v16i_store(v, a);
  for (i = 0; i < 16; ++i) {
    if (comma) fprintf(f, "\t");
    comma = 1;
    fprintf(f, "%i", v[15-i]);
  }
}




#endif //PINTS_POLYFILL_FUNCS_H
